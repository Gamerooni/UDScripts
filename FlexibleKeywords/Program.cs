using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins;

namespace FlexibleKeywords
{
    public class Program
    {
        public static Lazy<FKSettings> _settings = null!;
        public static FKSettings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                "Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "FlexibleKeywords.esp")
                .Run(args);
        }

        public static bool IsArmorMatchedBySetting(IArmorGetter armor, ArmorMatcher matcher, ILinkCache linkCache)
        {
            var matcherOperations = new ArmorMatcherOperations(matcher, linkCache);
            return matcherOperations.MatchArmor(armor);
        }

        public static HashSet<IFormLinkGetter<IKeywordGetter>> GetValidKeywords(IArmorGetter armor, 
            IEnumerable<IFormLinkGetter<IKeywordGetter>> keywords)
        {
            var result = new HashSet<IFormLinkGetter<IKeywordGetter>>();
            var armorKeywords = armor.Keywords;
            if (armorKeywords != null && armorKeywords.Any() && keywords.Any())
            {
                result = armorKeywords.Intersect(keywords).ToHashSet();
            }
            return result;
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            //Your code here!
        }
    }
}
